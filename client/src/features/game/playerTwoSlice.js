import Peer from "peerjs"
import { socket } from "../../app/hooks/socket"
import { createSlice } from "@reduxjs/toolkit"
import { toast } from "react-toastify"

const initialState = {
  playerId: "",
  permaJewels: {
    white: 0,
    blue: 0,
    green: 0,
    red: 0,
    black: 0,
    pearl: 0,
  },
  jewels: {
    white: 0,
    blue: 0,
    green: 0,
    red: 0,
    black: 0,
    pearl: 0,
    gold: 9,
  },
  points: { white: 0, blue: 0, green: 0, red: 0, black: 0, pearl: 0, gold: 0 },
  totalPoints: 19,
  crowns: 9,
  scrolls: 1,
  reservedCards: [],
  gotFirst2: false,
  gotSecond2: false,
  getRoyal2: "",
  myRoyals: [],
}

export const playerTwoSlice = createSlice({
  name: "playerTwo",
  initialState,
  reducers: {
    setId2: (state, x) => {
      state.playerId = x.payload
    },
    getJewel2: (state, x) => {
      console.log("playerTwoSlice")
      for (let i = 0; i < x.payload.length; i++) {
        let myColor = x.payload[i]
        state.jewels[myColor] += 1
      }
    },
    addCard2: (state, x) => {
      let myColor = x.payload.color
      state.permaJewels[myColor] += x.payload.quantity
      if (x.payload.color) {
        state.points[x.payload.color] += x.payload.points
      }
      state.totalPoints += x.payload.points
      state.crowns += x.payload.crowns
      //if crowns >= 3 and !gotFirst, getRoyal = true and gotFirst = true
      if (state.crowns >= 3 && !state.gotFirst2) {
        state.gotFirst2 = true
        state.getRoyal2 = "first"
      }
      //if crowns >= 6 and !gotSecond, getRoyal = false and gotSecond = true
      if (state.crowns >= 6 && !state.gotSecond2) {
        state.gotSecond2 = true
        state.getRoyal2 = "second"
      }
    },
    payJewels2: (state, x) => {
      console.log("playerTwoSlice")
      for (let i = 0; i < x.payload.length; i++) {
        state.jewels[x.payload[i]] -= 1
      }
    },
    takeScroll2: (state) => {
      state.scrolls -= 1
    },
    addScroll2: (state) => {
      state.scrolls += 1
    },
    checkWin2: (state, x) => {
      let colorPoints = Object.entries(state.points)
      let maxP = 0
      for (let i = 0; i < colorPoints.length; i++) {
        if (colorPoints[i][1] > maxP) {
          maxP = colorPoints[i][1]
        }
      }
      if (x.payload === 2) {
        //check num jewels
        if (Object.values(state.jewels).reduce((a, b) => a + b, 0) > 10) {
          toast.error("You have too many jewels, get rid of some")
          state.status = "reduce"
        }
        if (state.crowns >= 10 || state.totalPoints >= 20 || maxP >= 10) {
          toast.success("Congrats, you win!")
          state.status = "win"
        }
      }
      if (x.payload === 1) {
        if (state.crowns >= 10 || state.totalPoints >= 20 || maxP >= 10) {
          toast.success("Opponent Won")
          state.status = "lose"
        }
      }
    },
    clearStatus2: (state) => {
      state.status = ""
    },
    reserveCards2: (state, x) => {
      state.reservedCards.push(x.payload)
    },
    removeReserved2: (state, x) => {
      state.reservedCards.splice(x.payload, 1)
    },
    addRoyal2: (state, x) => {
      state.totalPoints += x.payload.points
      //sync points and total points
      state.myRoyals.push(x.payload.royal)
    },
  },
  // The `extraReducers` field lets the slice handle actions defined elsewhere,
  // including actions generated by createAsyncThunk or in other slices.
  extraReducers: () => {},
})

export const {
  addCard2,
  getJewel2,
  payJewels2,
  takeScroll2,
  checkWin2,
  clearStatus2,
  reserveCards2,
  setId2,
  addScroll2,
  addRoyal2,
  removeReserved2,
} = playerTwoSlice.actions

// The function below is called a selector and allows us to select a value from
// the state. Selectors can also be defined inline where they're used instead of
// in the slice file. For example: `useSelector((state: RootState) => state.counter.value)`
export const showBoard = (state) => state.playerTwo.jewels
// export const getP1Points = (state) => state.playerTwo.points
// export const getP1Crowns = (state) => state.playerTwo.crowns

export default playerTwoSlice.reducer
