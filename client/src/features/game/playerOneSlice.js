import { createSlice } from "@reduxjs/toolkit"

const initialState = {
  playerId: "",
  permaJewels: {
    white: 0,
    blue: 10,
    green: 10,
    red: 0,
    black: 0,
    pearl: 0,
  },
  jewels: {
    white: 10,
    blue: 10,
    green: 10,
    red: 10,
    black: 10,
    pearl: 10,
    gold: 0,
  },
  points: { white: 0, blue: 0, green: 0, red: 0, black: 0, pearl: 0, gold: 0 },
  crowns: 0,
  scrolls: 2,
  currPlayer: 1,
  reservedCards: ["hello", "bye"],
}

export const playerOneSlice = createSlice({
  name: "playerOne",
  initialState,
  reducers: {
    setId: (state, x) => {
      state.playerId = x.payload
    },
    getJewel: (state, x) => {
      for (let i = 0; i < x.payload.length; i++) {
        let myColor = x.payload[i]
        state.jewels[myColor] += 1
      }
    },
    addCard: (state, x) => {
      if (x.payload.color === "colorless") {
        console.log("colorless thing")
      } else {
        let myColor = x.payload.color
        state.permaJewels[myColor] += x.payload.quantity
        state.points[x.payload.color] += x.payload.points
        state.crowns += x.payload.crowns
      }
    },
    payJewels: (state, x) => {
      for (let i = 0; i < x.payload.length; i++) {
        state.jewels[x.payload[i]] -= 1
      }
    },
    takeScroll: (state) => {
      state.scrolls -= 1
    },
    addScroll: (state) => {
      state.scrolls += 1
    },
    setCurrPlayer: (state) => {
      //calculate end of turn here
      if (state.currPlayer === 1) {
        //end p1 turn

        //check win conditions
        let colorPoints = Object.entries(state.points)
        let maxP = 0
        for (let i = 0; i < colorPoints.length; i++) {
          if (colorPoints[i][1] > maxP) {
            maxP = colorPoints[i][1]
          }
        }
        let pointsTotal = Object.values(state.points).reduce((a, b) => a + b, 0)
        if (state.crowns >= 10 || pointsTotal >= 20 || maxP >= 10) {
          state.status = "win"
        }
        //check num jewels
        if (Object.values(state.jewels).reduce((a, b) => a + b, 0) > 10) {
          state.status = "reduce"
        }
        state.currPlayer = 2
      } else {
        state.currPlayer = 1
      }
    },
    clearStatus: (state) => {
      state.status = ""
    },
    reserveCards: (state, x) => {
      state.reservedCards.push(x.payload)
    },
  },
  // The `extraReducers` field lets the slice handle actions defined elsewhere,
  // including actions generated by createAsyncThunk or in other slices.
  extraReducers: () => {},
})

export const {
  setCurrPlayer,
  addCard,
  getJewel,
  payJewels,
  takeScroll,
  clearStatus,
  reserveCards,
  setId,
  addScroll,
} = playerOneSlice.actions

// The function below is called a selector and allows us to select a value from
// the state. Selectors can also be defined inline where they're used instead of
// in the slice file. For example: `useSelector((state: RootState) => state.counter.value)`
export const showBoard = (state) => state.playerOne.jewels
// export const getP1Points = (state) => state.playerOne.points
// export const getP1Crowns = (state) => state.playerOne.crowns

export default playerOneSlice.reducer
